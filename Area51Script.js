// ===================================================================
// Start - Init Values
// ===================================================================
var AM = new AssetManager();
var canvas = document.getElementById('gameWorld');
var ctx = canvas.getContext('2d');

var gameEngine = new GameEngine();
var player;
var enemy;
var dim = 20;

var cameraOrigin = { x: 0, y: 0 };

// ===================================================================
// End - Init Values
// ===================================================================



// ===================================================================
// Start - Animation
// ===================================================================
function Animation(spriteSheet, frameWidth, frameHeight, sheetWidth, frameDuration, frames, loop, scale) {
    this.spriteSheet = spriteSheet;
    this.frameWidth = frameWidth;
    this.frameDuration = frameDuration;
    this.frameHeight = frameHeight;
    this.sheetWidth = sheetWidth;
    this.frames = frames;
    this.totalTime = frameDuration * frames;
    this.elapsedTime = 0;
    this.loop = loop;
    this.scale = scale;
}

Animation.prototype.drawFrame = function (tick, ctx, x, y) {
    this.elapsedTime += tick;
    if (this.isDone()) {
        if (this.loop) this.elapsedTime = 0;
    }
    var frame = this.currentFrame();
    var xindex = 0;
    var yindex = 0;
    xindex = frame % this.sheetWidth;
    yindex = Math.floor(frame / this.sheetWidth);

    ctx.drawImage(this.spriteSheet,
        xindex * this.frameWidth, yindex * this.frameHeight,  // source from sheet
        this.frameWidth, this.frameHeight,
        x, y,
        this.frameWidth * this.scale,
        this.frameHeight * this.scale);
}

Animation.prototype.currentFrame = function () {
    return Math.floor(this.elapsedTime / this.frameDuration);
}

Animation.prototype.isDone = function () {
    return (this.elapsedTime >= this.totalTime);
}
// ===================================================================
// End - Animation
// ===================================================================





//Global variables
var myCells = [[], []]; // Tile grid
var myRegions = []; // Contains IDs of tiles per region
var myCanvasSize;

/**
 * Creates a troop in the game.
 * 
 * @param {String} name name of the troop (name must be unique)
 * @param {int} atk attack value of the troop
 * @param {int} def defense value of the troop
 * @param {int} cost cost value of the troop
 * @param {int} move defines how far the troop can move
 */
function Troop(name, atk, def, cost, move) {
    this.name = name,
        this.atk = atk,
        this.def = def,
        this.cost = cost,
        this.move = move
}

/**
 * Creates a building in the game.
 * 
 * @param {String} name name of the building (name must be unique)
 * @param {int} atk attack value of the building
 * @param {int} def defense value of the building
 * @param {int} cost cost value of the building
 */
function Building(name, atk, def, cost) {
    this.name = name,
        this.atk = atk,
        this.def = def,
        this.cost = cost
}

/**
 * Creates a region in the game.
 * 
 * @param {String} name name of the region (Name must be unique)
 * @param {Boolean} bldg true if barracks is present else false
 * @param {int} owner 1 = not owned, 0 = player owned, 1 = enemy owned
 * @param {int} troopX X coordinate of unit
 * @param {int} troopY Y coordinate of unit
 * @param {int} bldgX X coordinnate of bldg
 * @param {int} bldgY Y coordinate of bldg
 * @param {int} territory ID of territory
 * @param {Stringp[]} neighbors Array of region names which neighbors (1 move cost) this region
 * @param {*} troopCount number of troops in a region, 0 if no troops
 */
function Region(name, bldg, owner, troopX, troopY, bldgX, bldgY, territory, neighbors, troopCount) {
    this.name = name,
        this.bldg = bldg,
        this.owner = owner,
        this.troopX = troopX,
        this.troopY = troopY,
        this.bldgX = bldgX,
        this.bldgY = bldgY,
        this.territory = territory,
        this.neighbors = neighbors,
        this.troopCount = troopCount
}

function BuildRegions() {

    let Regions = [
        new Region('S - SW', false, 1, 40, 560, 40, 560, 'sand', [2, 4, 5], 0),
        new Region('S - SE', false, 1, 210, 560, 210, 560, 'sand', [2, 4, 5], 0),
        new Region('S - E', false, 1, 110, 460, 110, 460, 'sand', [2, 4, 5], 0),
        new Region('S - NE', false, 1, 110, 290, 110, 290, 'sand', [2, 4, 5], 0),
        new Region('S - NW', false, 1, 40, 290, 40, 290, 'sand', [2, 4, 5], 0),
        new Region('D - S', false, 1, 40, 240, 40, 240, 'dirt', [2, 4, 5], 0),
        new Region('D - NW', false, 1, 120, 70, 40, 70, 'dirt', [2, 4, 5], 0),
        new Region('D - E', false, 1, 280, 70, 280, 70, 'dirt', [2, 4, 5], 0),
        new Region('I - NW', false, 1, 390, 30, 390, 30, 'ice', [2, 4, 5], 0),
        new Region('I - W', false, 1, 390, 120, 390, 120, 'ice', [2, 4, 5], 0),
        new Region('I - SW', false, 1, 390, 210, 390, 210, 'ice', [2, 4, 5], 0),
        new Region('I - Mid', false, 1, 610, 30, 610, 30, 'ice', [2, 4, 5], 0),
        new Region('I - E', false, 1, 730, 30, 730, 30, 'ice', [2, 4, 5], 0),
        new Region('G - N', false, 1, 460, 380, 460, 380, 'grass', [2, 4, 5], 0),
        new Region('G - SE', false, 1, 690, 520, 690, 520, 'grass', [2, 4, 5], 0),
        new Region('G - SW', false, 1, 460, 520, 460, 580, 'grass', [2, 4, 5], 0),
    ];

    return Regions;

}

/**
 * Builds a Gameboard that is 90x72. By calling an index of the gameboard, the user is able to return whether or not the
 * tile is a land tile, it will return the region number and the territory type.
 */

function BuildBoard() {
    GAMEBOARD = [];
    for (var i = 0; i < 90; i++) {
        GAMEBOARD.push([]);
        for (var j = 0; j < 72; j++) {
            GAMEBOARD[i].push({
                land: false,
                region: 0,
                territory: 'none'
            });
        }
    }

    const data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 12, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 10, 10, 10, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 11, 11, 11, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 28, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 28, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 5, 5, 5, 5, 5, 5, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

    //console.log(data);
    //const testData = [0,1,2,3]

    for (var i = 0; i < 90; i++) {
        for (var j = 0; j < 72; j++) {
            let csvVal = data[72 * i + j];

            if (csvVal == 1 || csvVal == 2 || csvVal == 3 || csvVal == 4 || csvVal == 5) {
                GAMEBOARD[i][j].land = true;
                GAMEBOARD[i][j].region = csvVal;
                GAMEBOARD[i][j].territory = 'sand';
            } else if (csvVal == 6 || csvVal == 7 || csvVal == 8) {
                GAMEBOARD[i][j].land = true;
                GAMEBOARD[i][j].region = csvVal;
                GAMEBOARD[i][j].territory = 'dirt';
            } else if (csvVal == 9 || csvVal == 10 || csvVal == 11 || csvVal == 12 || csvVal == 13) {
                GAMEBOARD[i][j].land = true;
                GAMEBOARD[i][j].region = csvVal;
                GAMEBOARD[i][j].territory = 'ice';
            } else if (csvVal == 14 || csvVal == 15 || csvVal == 16) {
                GAMEBOARD[i][j].land = true;
                GAMEBOARD[i][j].region = csvVal;
                GAMEBOARD[i][j].territory = 'grass';
            } else if (csvVal == 0 || csvVal == -1) {
                GAMEBOARD[i][j].land = null;
                GAMEBOARD[i][j].region = csvVal;
                GAMEBOARD[i][j].territory = null;
            }
        }
    }

    return GAMEBOARD;

    // for (var i = 0; i < 90; i++){
    //     GAMEBOARD[i].forEach((element) => {
    //         if (element != null) console.log(element.territory)
    //     });
    // }

}

function LoadMap() {
    /**
     * Line 1 - Width, Height
     * Line 2 - Region Mapping - ex. Region[0] = [0,1,2], Region[1] = [3,4]
     * Comma delimited
     * Height = number of rows + 2
     * Width = # of elements per row
     */
}

function AddBuilding() {
    /**
     * Add a building to a tile
     */
}

function AddUnit(tileID) {
    /**
     * Add a unit to a tile
     */
}

/**
 * Animates the troop from source tile to destination tile.
 * This function will also check if the destination tile has enemy troops.
 * 
 * @param {Tile} theSource 
 * @param {Tile} theDestination 
 */
function MoveUnit(source, destination) {
    /**
     * Move from cell to cell
     * walking animation
     * 
     * check for opponents
     * 
     * Combat animation start
     * Battle system:
     * Attacker's atk - Defender's def
     * calculate remaining troops
     */
}

/**
 * Upgrade the building in the tile
 */
function UpgradeBuilding(tileID, buildingIndex) {
    /**
     * Animate the creation of the building (if possible)
     */
}

/**
 * Moves the number of troops designated by player from source to destination.
 * 
 * @param {Tile} source  
 * @param {Tile} destination 
 */
function SplitUnit(source, destination) {
}

/**
 * 
 * @param {*} x x-coordinate of mouse click event
 * @param {*} y y-coordinate of mouse click event
 */
function SelectCell(x, y) {
    /**
     * Check which region is selected
     * Shows Action Menu
     */
}

function EndTurn() {
    /**
     * Calculate food
     * activates the AI
     */
}

function ActivateAI() {
    /**
     * AI will decide what to do depending on variables visible to it.
     */
}


// ===================================================================
// Start - Faction Template
// ===================================================================
function Faction(game) {
    this.food = 0;
    this.money = 0;
    Entity.call(this, game, 0, 0);
}

Faction.prototype = new Entity();
Faction.prototype.constructor = ResourceDisplay;
// ===================================================================
// End - Faction Template
// ===================================================================



// ===================================================================
// Start - Player
// ===================================================================
// player = new Faction()

// Faction.prototype = new Entity();
// Faction.prototype.constructor = ResourceDisplay;
// ===================================================================
// End - Player
// ===================================================================



// ===================================================================
// Start - Enemy
// ===================================================================
// function Faction(game) {
//     this.food = 0;
//     this.money = 0;
//     Entity.call(this, game, 0, 0);
// }

// Faction.prototype = new Entity();
// Faction.prototype.constructor = ResourceDisplay;
// ===================================================================
// End - Enemy
// ===================================================================



// ===================================================================
// Start - Camera
// ===================================================================
// function Camera(game) {
//     Entity.call(this, game, 0, 0);
// }

// Camera.prototype = new Entity();
// Camera.prototype.constructor = Camera;

// Camera.prototype.update = function (ctx) {
//     var key = gameEngine.keyDown;

//     if (key != null) {
//         if (key["code"] === "KeyW") {
//             cameraOrigin.y--;
//         }
//         else if (key["code"] === "KeyA") {
//             console.log("Pressed A");
//         }
//         else if (key["code"] === "KeyS") {
//             console.log("Pressed S");
//         }
//         else if (key["code"] === "KeyD") {
//             cameraOrigin.y++;
//         }


//         gameEngine.keyDown = null;
//     }

//     // ctx.drawImage(this.spriteSheet,
//     //     xindex * this.frameWidth, yindex * this.frameHeight,  // source from sheet
//     //     this.frameWidth, this.frameHeight,
//     //     x, y,
//     //     this.frameWidth * this.scale,
//     //     this.frameHeight * this.scale);
// }
// ===================================================================
// End - Camera
// ===================================================================




// ===================================================================
// Start - Resource Display
// ===================================================================
function ResourceDisplay(game) {
    this.border = AM.getAsset("./img/sidebar/resource_display.png");
    this.foodIcon = AM.getAsset("./img/sidebar/food_icon.png")
    this.foodCount = 0;
    Entity.call(this, game, 900, 0);
}

ResourceDisplay.prototype = new Entity();
ResourceDisplay.prototype.constructor = ResourceDisplay;

ResourceDisplay.prototype.draw = function (ctx) {
    ctx.drawImage(this.border, this.x, this.y);
    ctx.drawImage(this.foodIcon, this.x + 30, this.y + 10);
    ctx.font = "24px Arial";
    ctx.fillText(this.foodCount, this.x + 70, this.y + 35);
}
// ===================================================================
// End - Resource Display
// ===================================================================

// // === START OF BUILD DISPLAY ===
// function BuildDisplay(game) {
//     this.border = AM.getAsset("./img/sidebar/build_display.png");
//     this.buildTroopButton = AM.getAsset("./img/sidebar/build_soldier_button.png");
//     this.buildTroopButtonPressed = AM.getAsset("./img/sidebar/build_soldier_button_pressed.png");
//     this.buildBarracksButton = AM.getAsset("./img/sidebar/build_barracks_button.png");
//     this.buildBarracksButtonPressed = AM.getAsset("./img/sidebar/build_barracks_button_pressed.png");
//     Entity.call(this, game, 900, 50);
// }

// BuildDisplay.prototype = new Entity();
// BuildDisplay.prototype.constructor = BuildDisplay;

// BuildDisplay.prototype.draw = function (ctx) {
//     // Background and Title Display
//     ctx.drawImage(this.border, this.x, this.y);
//     ctx.font = "24px Arial";
//     ctx.fillText("Build", this.x + 30, this.y + 35);

//     // Troop Display
//     ctx.drawImage(this.buildTroopButton, this.x + 40, this.y + 50);
//     ctx.font = "20px Arial";
//     ctx.fillText("Troop Count: 0", this.x + 100, this.y + 80);

//     // Building Display
//     ctx.drawImage(this.buildBarracksButton, this.x + 40, this.y + 110);
//     ctx.font = "20px Arial";
//     ctx.fillText("Barracks Built: No", this.x + 100, this.y + 140);
// }
// // === END OF BUILD DISPLAY ===

// // === START OF MOVE DISPLAY ===
// function MoveDisplay(game) {
//     this.border = AM.getAsset("./img/sidebar/move_display.png");
//     this.moveButton = AM.getAsset("./img/sidebar/move_button.png");
//     this.moveButtonPressed = AM.getAsset("./img/sidebar/move_button_pressed.png");
//     this.fightButton = AM.getAsset("./img/sidebar/fight_button.png");
//     this.fightButtonPressed = AM.getAsset("./img/sidebar/fight_button_pressed.png");
//     Entity.call(this, game, 900, 360);
// }

// MoveDisplay.prototype = new Entity();
// MoveDisplay.prototype.constructor = MoveDisplay;

// MoveDisplay.prototype.draw = function (ctx) {
//     ctx.drawImage(this.border, this.x, this.y);
//     ctx.font = "24px Arial";
//     ctx.fillText("Move/Fight", this.x + 30, this.y + 35);

//     // Move Display
//     ctx.drawImage(this.moveButton, this.x + 40, this.y + 50);
//     ctx.font = "20px Arial";
//     ctx.fillText("Move", this.x + 100, this.y + 80);

//     // Attack Display
//     ctx.drawImage(this.fightButton, this.x + 40, this.y + 110);
//     ctx.font = "20px Arial";
//     ctx.fillText("Attack!", this.x + 100, this.y + 140);
// }
// // === END OF MOVE DISPLAY ===

// // === START OF ENDTURN DISPLAY ===
// function EndTurnDisplay(game) {
//     this.border = AM.getAsset("./img/sidebar/end_turn_display.png");
//     this.endTurnButton = AM.getAsset("./img/sidebar/end_turn_button.png");
//     this.isEndTurnButtonPressed = false;
//     this.endTurnButtonPressed = AM.getAsset("./img/sidebar/end_turn_button_pressed.png");
//     Entity.call(this, game, 900, 670);
// }

// EndTurnDisplay.prototype = new Entity();
// EndTurnDisplay.prototype.constructor = EndTurnDisplay;

// EndTurnDisplay.prototype.update = function () {
//     if (this.game.endTurnPressed) this.isEndTurnButtonPressed = true;
//     Entity.prototype.update.call(this);
// }

// EndTurnDisplay.prototype.draw = function (ctx) {
//     ctx.drawImage(this.border, this.x, this.y);
//     if (this.isEndTurnButtonPressed) ctx.drawImage(this.endTurnButtonPressed, this.x + 117, this.y + 7);
//     else ctx.drawImage(this.endTurnButton, this.x + 117, this.y + 7);
// }
// // === END OF ENDTURN DISPLAY ===



// // ///// REFACTOR ////////

// //=== START OF MARINE ===
// function Marine(game, spritesheet) {
//     this.animation = new Animation(spritesheet, 22, 33, 3, 0.15, 3, true, 1);
//     this.speed = 10;
//     this.ctx = game.ctx;
//     Entity.call(this, game, 0, 20);

// }

// Marine.prototype = new Entity();
// Marine.prototype.constructor = Marine;

// Marine.prototype.update = function () {

//     this.y += this.game.clockTick * this.speed;
//     if (this.y < 120) {
//         this.y += 1;
//         Entity.prototype.update.call(this);
//     } else {
//         this.y = 121;
//         this.animation.frameDuration = 1;
//     }
// }

// Marine.prototype.draw = function () {
//     this.animation.drawFrame(this.game.clockTick, this.ctx, this.x, this.y);
//     Entity.prototype.draw.call(this);
// }
// //=== END OF MARINE ===


// //=== START OF MARINEEAST ===
// function MarineEast(game, spritesheet) {
//     this.animation = new Animation(spritesheet, 22, 33, 3, 0.15, 3, true, 1);
//     this.speed = 50;
//     this.ctx = game.ctx;
//     Entity.call(this, game, 50, 200);

// }

// MarineEast.prototype = new Entity();
// MarineEast.prototype.constructor = MarineEast;

// MarineEast.prototype.update = function () {
//     this.x += this.game.clockTick * this.speed;
//     if (this.x < 700) {
//         this.x += 0.3;
//         Entity.prototype.update.call(this);
//     } else {
//         this.x = 701;
//         this.animation.frameDuration = 1;
//     }

// }

// MarineEast.prototype.draw = function () {
//     this.animation.drawFrame(this.game.clockTick, this.ctx, this.x, this.y);
//     Entity.prototype.draw.call(this);
// }
// //=== END OF MarineEast ===


// //=== START OF HYDRALISK ===
// function Hydralisk(game, spritesheet) {
//     this.animation = new Animation(spritesheet, 45, 70, 3, 0.15, 3, true, 1);
//     this.speed = 10;
//     this.ctx = game.ctx;
//     Entity.call(this, game, 0, 350);
// }

// Hydralisk.prototype = new Entity();
// Hydralisk.prototype.constructor = Hydralisk;


// Hydralisk.prototype.update = function () {
//     this.x += this.game.clockTick * this.speed;
//     if (this.x < 800) {
//         this.x += 0.3;
//         Entity.prototype.update.call(this);
//     } else {
//         this.x = 801;
//         this.animation.frameDuration = 1;
//     }
// }


// Hydralisk.prototype.draw = function () {
//     this.animation.drawFrame(this.game.clockTick, this.ctx, this.x, this.y);
//     Entity.prototype.draw.call(this);
// }
// //=== END OF HYDRALISK ===

// === START OF MAP DISPLAY ===
function MapDisplay(game) {
    this.border = AM.getAsset("./img/background.png");
    this.bgWidth = 1920;
    this.bgHeight = 1080;
    this.minimapWidth = this.bgWidth / 8;
    this.miniMapHeight = this.bgHeight / 8;
    this.keyXMax = (this.bgWidth / 20) - 45;
    this.keyYMax = (this.bgHeight / 20) - 36;
    this.btnDim = 80;
    Entity.call(this, game, 0, 0);
}

MapDisplay.prototype = new Entity();
MapDisplay.prototype.constructor = MapDisplay;

MapDisplay.prototype.update = function (ctx) {
    var key = gameEngine.keyDown;

    if (key != null) {
        if (key["code"] === "KeyW") {
            if (cameraOrigin.y > 0)
                cameraOrigin.y--;
        }
        else if (key["code"] === "KeyA") {
            if (cameraOrigin.x > 0)
                cameraOrigin.x--;
        }
        else if (key["code"] === "KeyS") {
            if (cameraOrigin.y < this.keyYMax)
                cameraOrigin.y++;
        }
        else if (key["code"] === "KeyD") {
            if (cameraOrigin.x < this.keyXMax)
                cameraOrigin.x++;
        }


        gameEngine.keyDown = null;
    }

    // ctx.drawImage(this.spriteSheet,
    //     xindex * this.frameWidth, yindex * this.frameHeight,  // source from sheet
    //     this.frameWidth, this.frameHeight,
    //     x, y,
    //     this.frameWidth * this.scale,
    //     this.frameHeight * this.scale);
}

MapDisplay.prototype.draw = function (ctx) {


    ctx.drawImage(this.border, cameraOrigin.x * 20, cameraOrigin.y * 20,
        this.bgWidth, this.bgHeight,
        0, 0,
        this.bgWidth, this.bgHeight);

    ctx.fillStyle = "#9e9e9e";
    ctx.strokeStyle = "black";
    ctx.fillRect(900, 0, 380, 50);
    ctx.strokeRect(900, 0, 380, 50);
    // ctx.drawImage("./img/food_icon.png", 0, 0);
    Entity.prototype.draw.call(this);

    ctx.fillRect(0, 0, this.minimapWidth, this.miniMapHeight);

    var mX = (this.minimapWidth / 2) - ((this.bgWidth / 8) / 2); // Start point of image in mini map
    var mY = (this.miniMapHeight / 2) - ((this.bgHeight / 8) / 2); // Start point of image in mini map

    ctx.drawImage(this.border, 0, 0,
        this.bgWidth, this.bgHeight,
        0,
        0,
        this.bgWidth / 8, this.bgHeight / 8);

    ctx.strokeRect(mX + (cameraOrigin.x * 2),
        mY + (cameraOrigin.y * 2),
        (gameEngine.surfaceWidth - 380) / 8,
        gameEngine.surfaceHeight / 8);


    ctx.fillRect(gameEngine.surfaceWidth - this.btnDim, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.strokeRect(gameEngine.surfaceWidth - this.btnDim, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.fillRect(gameEngine.surfaceWidth - this.btnDim * 2, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.strokeRect(gameEngine.surfaceWidth - this.btnDim * 2, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.fillRect(gameEngine.surfaceWidth - this.btnDim * 3, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.strokeRect(gameEngine.surfaceWidth - this.btnDim * 3, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.fillRect(gameEngine.surfaceWidth - this.btnDim * 4, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.strokeRect(gameEngine.surfaceWidth - this.btnDim * 4, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
}
// === END OF MAP DISPLAY ===



// ===================================================================
// Start - create region array
// ===================================================================

let regionArray = [];
// line 54 of gameengine

function createArray(origin){
    
    for(var i = 0; i < 45; i++){
        regionArray.push([]);
        for(var j = 0; j < 36; j++){
            regionArray[i].push([]);
        }
    }

    // update the value of the array

    for(var i = 0; i < 45; i++){
        for(var j = 0; j < 36; j++){
            let xCor = origin.x + i;
            let yCor = origin.y + j;
            regionArray[i][j].name = GAMEBOARD[xCor][yCor].region.toString();
            regionArray[i][j].x = xCor;
            regionArray[i][j].y = yCor;
            regionArray[i][j].w = dim;
            regionArray[i][j].h = dim;
        }
    }
}
// ===================================================================
// End - create region array
// ===================================================================



// ===================================================================
// Start - get region id for clicked region
// ===================================================================

function getClickedRegion(regionArray, clickX, clickY){
    var regionId;
    for(var i = 0; i < 45; i++){
        for(var j = 0; j < 36; j++){
            if(regionArray[i][j].x === clickX && regionArray[i][j].y === clickY){
                regionId = regionArray[i][j].name;
            }
        }
    }
    return regionId;
}

// ===================================================================
// End - get region id for clicked region
// ===================================================================


///// REFACTOR ////////

/**
 * This function will be onLoad from the canvas
 */
function Main() {
    /**
     * load Welcome Sreen and button entities with onClick events
     * 
     * unload Welcome Scren onClick events
     * attach GAME onCLick events
     * attach GAME keyboard events
     * loadMap
     */


    // Camera
    AM.queueDownload("./img/background.png");

    // Resource Display
    AM.queueDownload("./img/sidebar/resource_display.png");
    AM.queueDownload("./img/sidebar/food_icon.png");
    AM.queueDownload("./img/sidebar/money_icon.png");

    // Build Display
    AM.queueDownload("./img/sidebar/build_display.png");
    AM.queueDownload("./img/sidebar/build_soldier_button.png");
    AM.queueDownload("./img/sidebar/build_soldier_button_pressed.png");
    AM.queueDownload("./img/sidebar/build_barracks_button.png");
    AM.queueDownload("./img/sidebar/build_barracks_button_pressed.png");

    // Move Display
    AM.queueDownload("./img/sidebar/move_display.png");
    AM.queueDownload("./img/sidebar/move_button.png");
    AM.queueDownload("./img/sidebar/move_button_pressed.png");
    AM.queueDownload("./img/sidebar/fight_button.png");
    AM.queueDownload("./img/sidebar/fight_button_pressed.png");

    // End Turn Display
    AM.queueDownload("./img/sidebar/end_turn_display.png");
    AM.queueDownload("./img/sidebar/end_turn_button.png");
    AM.queueDownload("./img/sidebar/end_turn_button_pressed.png");

    // Game Map Display
    AM.queueDownload("./img/map/game map9072.png");

    // Animation
    AM.queueDownload("./img/Hydralisk2_east.png");
    AM.queueDownload("./img/Marine_walking_south1.png");
    AM.queueDownload("./img/Marine_walking_east1.png");

    AM.downloadAll(function () {

        gameEngine.init(ctx);
        gameEngine.start();
        // gameEngine.addEntity(new Camera(gameEngine));
        gameEngine.addEntity(new MapDisplay(gameEngine));
        gameEngine.addEntity(new ResourceDisplay(gameEngine));
        gameEngine.addEntity(new BuildDisplay(gameEngine));
        gameEngine.addEntity(new MoveDisplay(gameEngine));

        gameEngine.addEntity(new EndTurnDisplay(gameEngine));
        
        // gameEngine.addEntity(new Marine(gameEngine, AM.getAsset("./img/Marine_walking_south1.png")));
        // gameEngine.addEntity(new MarineEast(gameEngine, AM.getAsset("./img/Marine_walking_east1.png")));
        // gameEngine.addEntity(new Hydralisk(gameEngine, AM.getAsset("./img/Hydralisk2_east.png")));
    });

    BuildBoard();

}

Main();