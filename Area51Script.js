// ===================================================================
// Start - Global Variables
// ===================================================================
var AM = new AssetManager();
var canvas = document.getElementById('gameWorld');
var ctx = canvas.getContext('2d');

var gameEngine = new GameEngine();
var player;
var enemy;
var dim = 20;

var cameraOrigin = { x: 0, y: 0 };
var myCells = [[], []]; // Tile grid
var myRegions = []; // Contains IDs of tiles per region
var myCanvasSize;

var bgWidth = 1920;
var bgHeight = 1080;
// ===================================================================
// End - Global Variables
// ===================================================================



// ===================================================================
// Start - Animation
// ===================================================================
function Animation(spriteSheet, frameWidth, frameHeight, sheetWidth, frameDuration, frames, loop, scale) {
    this.spriteSheet = spriteSheet;
    this.frameWidth = frameWidth;
    this.frameDuration = frameDuration;
    this.frameHeight = frameHeight;
    this.sheetWidth = sheetWidth;
    this.frames = frames;
    this.totalTime = frameDuration * frames;
    this.elapsedTime = 0;
    this.loop = loop;
    this.scale = scale;
}

Animation.prototype.drawFrame = function (tick, ctx, x, y) {
    this.elapsedTime += tick;
    if (this.isDone()) {
        if (this.loop) this.elapsedTime = 0;
    }
    var frame = this.currentFrame();
    var xindex = 0;
    var yindex = 0;
    xindex = frame % this.sheetWidth;
    yindex = Math.floor(frame / this.sheetWidth);

    ctx.drawImage(this.spriteSheet,
        xindex * this.frameWidth, yindex * this.frameHeight,  // source from sheet
        this.frameWidth, this.frameHeight,
        x, y,
        this.frameWidth * this.scale,
        this.frameHeight * this.scale);
}

Animation.prototype.currentFrame = function () {
    return Math.floor(this.elapsedTime / this.frameDuration);
}

Animation.prototype.isDone = function () {
    return (this.elapsedTime >= this.totalTime);
}
// ===================================================================
// End - Animation
// ===================================================================



// ===================================================================
// Start - Map Entities
// ===================================================================
/**
 * Creates a troop in the game.
 * 
 * @param {String} name name of the troop (name must be unique)
 * @param {int} atk attack value of the troop
 * @param {int} def defense value of the troop
 * @param {int} cost cost value of the troop
 * @param {int} move defines how far the troop can move
 */
function Troop(name, atk, def, cost, move) {
    this.name = name,
        this.atk = atk,
        this.def = def,
        this.cost = cost,
        this.move = move
}

/**
 * Creates a building in the game.
 * 
 * @param {String} name name of the building (name must be unique)
 * @param {int} atk attack value of the building
 * @param {int} def defense value of the building
 * @param {int} cost cost value of the building
 */
function Building(name, atk, def, cost) {
    this.name = name,
        this.atk = atk,
        this.def = def,
        this.cost = cost
}

/**
 * Creates a region in the game.
 * 
 * @param {String} name name of the region (Name must be unique)
 * @param {Boolean} bldg true if barracks is present else false
 * @param {int} owner 1 = not owned, 0 = player owned, 1 = enemy owned
 * @param {int} troopX X coordinate of unit
 * @param {int} troopY Y coordinate of unit
 * @param {int} bldgX X coordinnate of bldg
 * @param {int} bldgY Y coordinate of bldg
 * @param {int} territory ID of territory
 * @param {Stringp[]} neighbors Array of region names which neighbors (1 move cost) this region
 * @param {*} troopCount number of troops in a region, 0 if no troops
 */
function Region(name, bldg, owner, troopX, troopY, bldgX, bldgY, territory, neighbors, troopCount) {
    this.name = name,
        this.bldg = bldg,
        this.owner = owner,
        this.troopX = troopX,
        this.troopY = troopY,
        this.bldgX = bldgX,
        this.bldgY = bldgY,
        this.territory = territory,
        this.neighbors = neighbors,
        this.troopCount = troopCount
}
// ===================================================================
// End - Map Entities
// ===================================================================



// ===================================================================
// Start - Utility Functions
// ===================================================================
function BuildRegions() {
    let Regions = [
        new Region('S - SW', false, 1, 40, 560, 40, 560, 'sand', [2, 4, 5], 0),
        new Region('S - SE', false, 1, 210, 560, 210, 560, 'sand', [2, 4, 5], 0),
        new Region('S - E', false, 1, 110, 460, 110, 460, 'sand', [2, 4, 5], 0),
        new Region('S - NE', false, 1, 110, 290, 110, 290, 'sand', [2, 4, 5], 0),
        new Region('S - NW', false, 1, 40, 290, 40, 290, 'sand', [2, 4, 5], 0),
        new Region('D - S', false, 1, 40, 240, 40, 240, 'dirt', [2, 4, 5], 0),
        new Region('D - NW', false, 1, 120, 70, 40, 70, 'dirt', [2, 4, 5], 0),
        new Region('D - E', false, 1, 280, 70, 280, 70, 'dirt', [2, 4, 5], 0),
        new Region('I - NW', false, 1, 390, 30, 390, 30, 'ice', [2, 4, 5], 0),
        new Region('I - W', false, 1, 390, 120, 390, 120, 'ice', [2, 4, 5], 0),
        new Region('I - SW', false, 1, 390, 210, 390, 210, 'ice', [2, 4, 5], 0),
        new Region('I - Mid', false, 1, 610, 30, 610, 30, 'ice', [2, 4, 5], 0),
        new Region('I - E', false, 1, 730, 30, 730, 30, 'ice', [2, 4, 5], 0),
        new Region('G - N', false, 1, 460, 380, 460, 380, 'grass', [2, 4, 5], 0),
        new Region('G - SE', false, 1, 690, 520, 690, 520, 'grass', [2, 4, 5], 0),
        new Region('G - SW', false, 1, 460, 520, 460, 580, 'grass', [2, 4, 5], 0),
    ];
    return Regions;
}

/**
 * Builds a Gameboard that is 90x72. By calling an index of the gameboard, the user is able to return whether or not the
 * tile is a land tile, it will return the region number and the territory type.
 */
function BuildBoard() {
    var gameboard = [];
    for (var i = 0; i < 90; i++) {
        gameboard.push([]);
        for (var j = 0; j < 72; j++) {
            gameboard[i].push({
                land: false,
                region: 0,
                territory: 'none'
            });
        }
    }

    const data

    //console.log(data);
    //const testData = [0,1,2,3]

    for (var i = 0; i < 90; i++) {
        for (var j = 0; j < 72; j++) {
            let csvVal = data[72 * i + j];

            if (csvVal == 1 || csvVal == 2 || csvVal == 3 || csvVal == 4 || csvVal == 5) {
                gameboard[i][j].land = true;
                gameboard[i][j].region = csvVal;
                gameboard[i][j].territory = 'sand';
            } else if (csvVal == 6 || csvVal == 7 || csvVal == 8) {
                gameboard[i][j].land = true;
                gameboard[i][j].region = csvVal;
                gameboard[i][j].territory = 'dirt';
            } else if (csvVal == 9 || csvVal == 10 || csvVal == 11 || csvVal == 12 || csvVal == 13) {
                gameboard[i][j].land = true;
                gameboard[i][j].region = csvVal;
                gameboard[i][j].territory = 'ice';
            } else if (csvVal == 14 || csvVal == 15 || csvVal == 16) {
                gameboard[i][j].land = true;
                gameboard[i][j].region = csvVal;
                gameboard[i][j].territory = 'grass';
            } else if (csvVal == 0 || csvVal == -1) {
                gameboard[i][j].land = null;
                gameboard[i][j].region = csvVal;
                gameboard[i][j].territory = null;
            }
        }
    }

    return gameboard;

    // for (var i = 0; i < 90; i++){
    //     GAMEBOARD[i].forEach((element) => {
    //         if (element != null) console.log(element.territory)
    //     });
    // }

}
// ===================================================================
// End - Utility Functions
// ===================================================================



// ===================================================================
// Start - Resource Display
// ===================================================================
function ResourceDisplay(game) {
    this.border = AM.getAsset("./img/sidebar/resource_display.png");
    this.foodIcon = AM.getAsset("./img/sidebar/food_icon.png")
    this.moneyIcon = AM.getAsset("./img/sidebar/money_icon.png")
    this.foodCount = 0;
    this.moneyCount = 0;
    Entity.call(this, game, 900, 0);
}

ResourceDisplay.prototype = new Entity();
ResourceDisplay.prototype.constructor = ResourceDisplay;

ResourceDisplay.prototype.draw = function (ctx) {
    ctx.fillStyle = "black";
    ctx.font = "24px Arial";

    // Draw the border
    ctx.drawImage(this.border, this.x, this.y);

    // Draw the Food Icon and Count
    ctx.drawImage(this.foodIcon, this.x + 30, this.y + 10);
    ctx.drawImage(this.foodIcon, this.x + 30, this.y + 10);
    ctx.fillText(this.foodCount, this.x + 70, this.y + 35);
    ctx.fillText(this.foodCount, this.x + 70, this.y + 35);

    // Draw the Money Icon and Count
    ctx.drawImage(this.moneyIcon, this.x + 130, this.y + 10);
    ctx.drawImage(this.moneyIcon, this.x + 130, this.y + 10);
    ctx.fillText(this.moneyCount, this.x + 160, this.y + 35);
    ctx.fillText(this.moneyCount, this.x + 160, this.y + 35);
}
// ===================================================================
// End - Resource Display
// ===================================================================



// ===================================================================
// Start - Map Display
// ===================================================================
function MapDisplay(game) {
    this.border = AM.getAsset("./img/background.png");
    Entity.call(this, game, 0, 0);
}

MapDisplay.prototype = new Entity();
MapDisplay.prototype.constructor = MapDisplay;

MapDisplay.prototype.update = function (ctx) {
}

MapDisplay.prototype.draw = function (ctx) {
    ctx.drawImage(this.border, cameraOrigin.x * 20, cameraOrigin.y * 20,
        bgWidth, bgHeight,
        0, 0,
        bgWidth, bgHeight);
}
// ===================================================================
// End - Map Display
// ===================================================================



// ===================================================================
// Start - Minimap Display
// ===================================================================
function MinimapDisplay(game) {
    this.border = AM.getAsset("./img/background.png");
    this.minimapBorderWidth = 220;
    this.miniMapBorderHeight = 220;
    Entity.call(this, game, 0, 0);
}

MinimapDisplay.prototype = new Entity();
MinimapDisplay.prototype.constructor = MinimapDisplay;

MinimapDisplay.prototype.update = function (ctx) {
}

MinimapDisplay.prototype.draw = function (ctx) {
    ctx.fillStyle = "#9e9e9e";
    ctx.strokeStyle = "black";

    ctx.strokeRect(0, 0, this.minimapWidth, this.miniMapHeight);
    ctx.fillRect(0, 0, this.minimapWidth, this.miniMapHeight);

    var mX = (this.minimapWidth / 2) - ((bgWidth / 8) / 2); // Start point of image in mini map
    var mY = (this.miniMapHeight / 2) - ((bgHeight / 8) / 2); // Start point of image in mini map

    ctx.drawImage(this.border, 0, 0,
        bgWidth, bgHeight,
        0,
        0,
        bgWidth * .10, bgHeight * .10);

    ctx.strokeRect(mX + (cameraOrigin.x * 2),
        mY + (cameraOrigin.y * 2),
        (gameEngine.surfaceWidth - 380) / 8,
        gameEngine.surfaceHeight / 8);
}
// ===================================================================
// End - Minimap Display
// ===================================================================



// ===================================================================
// Start - Control Display
// ===================================================================
function ControlDisplay(game) {
    this.btnDim = 80;
    Entity.call(this, game, 0, 0);
}

ControlDisplay.prototype = new Entity();
ControlDisplay.prototype.constructor = ControlDisplay;

ControlDisplay.prototype.update = function (ctx) {
}

ControlDisplay.prototype.draw = function (ctx) {
    ctx.fillStyle = "#9e9e9e";
    ctx.strokeStyle = "black";

    ctx.fillRect(gameEngine.surfaceWidth - this.btnDim, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.strokeRect(gameEngine.surfaceWidth - this.btnDim, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.fillRect(gameEngine.surfaceWidth - this.btnDim * 2, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.strokeRect(gameEngine.surfaceWidth - this.btnDim * 2, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.fillRect(gameEngine.surfaceWidth - this.btnDim * 3, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.strokeRect(gameEngine.surfaceWidth - this.btnDim * 3, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.fillRect(gameEngine.surfaceWidth - this.btnDim * 4, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
    ctx.strokeRect(gameEngine.surfaceWidth - this.btnDim * 4, gameEngine.surfaceHeight - this.btnDim, this.btnDim, this.btnDim);
}
// ===================================================================
// End - Control Display
// ===================================================================



// ===================================================================
// Start - Input Handler
// ===================================================================
function InputHandler(game) {
    this.keyXMax = (bgWidth / dim) - (gameEngine.surfaceWidth / dim);
    this.keyYMax = (bgHeight / dim) - (gameEngine.surfaceHeight / dim);
    Entity.call(this, game, 0, 0);
}

InputHandler.prototype = new Entity();
InputHandler.prototype.constructor = MapDisplay;

InputHandler.prototype.update = function (ctx) {
    // Control for WASD map movement
    var key = gameEngine.keyDown;
    if (key != null) {
        if (key["code"] === "KeyW") {
            if (cameraOrigin.y > 0)
                cameraOrigin.y--;
        }
        else if (key["code"] === "KeyA") {
            if (cameraOrigin.x > 0)
                cameraOrigin.x--;
        }
        else if (key["code"] === "KeyS") {
            if (cameraOrigin.y < this.keyYMax)
                cameraOrigin.y++;
        }
        else if (key["code"] === "KeyD") {
            if (cameraOrigin.x < this.keyXMax)
                cameraOrigin.x++;
        }
        gameEngine.keyDown = null;
    }
}
// ===================================================================
// End - Input Controller
// ===================================================================



// ===================================================================
// Start - create region array
// ===================================================================
let regionArray = [];
// line 54 of gameengine

function createArray(origin) {

    for (var i = 0; i < 45; i++) {
        regionArray.push([]);
        for (var j = 0; j < 36; j++) {
            regionArray[i].push([]);
        }
    }

    // update the value of the array

    for (var i = 0; i < 45; i++) {
        for (var j = 0; j < 36; j++) {
            let xCor = origin.x + i;
            let yCor = origin.y + j;
            regionArray[i][j].name = GAMEBOARD[xCor][yCor].region.toString();
            regionArray[i][j].x = xCor;
            regionArray[i][j].y = yCor;
            regionArray[i][j].w = dim;
            regionArray[i][j].h = dim;
        }
    }
}
// ===================================================================
// End - create region array
// ===================================================================



// ===================================================================
// Start - get region id for clicked region
// ===================================================================
function getClickedRegion(regionArray, clickX, clickY) {
    var regionId;
    for (var i = 0; i < 45; i++) {
        for (var j = 0; j < 36; j++) {
            if (regionArray[i][j].x === clickX && regionArray[i][j].y === clickY) {
                regionId = regionArray[i][j].name;
            }
        }
    }
    return regionId;
}
// ===================================================================
// End - get region id for clicked region
// ===================================================================



// ===================================================================
// Start - Main
// ===================================================================
function Main() {
    // Resource Display
    AM.queueDownload("./img/sidebar/resource_display.png");
    AM.queueDownload("./img/sidebar/food_icon.png");
    AM.queueDownload("./img/sidebar/money_icon.png");

    // Game Map Display
    AM.queueDownload("./img/map/game map9072.png");
    AM.queueDownload("./img/background.png");

    AM.downloadAll(function () {

        gameEngine.init(ctx);
        gameEngine.start();

        gameEngine.addEntity(new MapDisplay(gameEngine));
        gameEngine.addEntity(new MinimapDisplay(gameEngine));
        gameEngine.addEntity(new ResourceDisplay(gameEngine));
        gameEngine.addEntity(new ControlDisplay(gameEngine));
        gameEngine.addEntity(new InputHandler(gameEngine));
    });

    BuildBoard();
}

Main();
// ===================================================================
// End - Main
// ===================================================================