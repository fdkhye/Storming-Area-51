// ===================================================================
// Start - Global Variables
// ===================================================================
var AM = new AssetManager();
var canvas = document.getElementById('gameWorld');
var ctx = canvas.getContext('2d');

var gameEngine = new GameEngine();
gameEngine.init(ctx);
gameEngine.start();
var players = [];
var dim = 20; //Cell size

var cameraOrigin = { x: 0, y: 0 }; //Camera in top left pixel of screen

var gameboard = BuildBoard();
console.log("%c Gameboard below this:", "background: #222; color: #bada55");
console.log(gameboard);
var regions = BuildRegions();

var regionArray = []; // This is the overlay used for the click event
createArray(cameraOrigin);
console.log("%c RegionArray below this:", "background: #222; color: #bada55");
console.log(regionArray);

var bgWidth = 1800;
var bgHeight = 1440;

var modbgWidth = bgWidth;
var modbgHeight = bgHeight;

var debug = true;
var debugGrid = true;

var selectedRegion = -1;
// ===================================================================
// End - Global Variables
// ===================================================================



// ===================================================================
// Start - Animation
// ===================================================================
function Animation(spriteSheet, frameWidth, frameHeight, sheetWidth, frameDuration, frames, loop, scale) {
    this.spriteSheet = spriteSheet;
    this.frameWidth = frameWidth;
    this.frameDuration = frameDuration;
    this.frameHeight = frameHeight;
    this.sheetWidth = sheetWidth;
    this.frames = frames;
    this.totalTime = frameDuration * frames;
    this.elapsedTime = 0;
    this.loop = loop;
    this.scale = scale;
}

Animation.prototype.drawFrame = function (tick, ctx, x, y) {
    this.elapsedTime += tick;
    if (this.isDone()) {
        if (this.loop) this.elapsedTime = 0;
    }
    var frame = this.currentFrame();
    var xindex = 0;
    var yindex = 0;
    xindex = frame % this.sheetWidth;
    yindex = Math.floor(frame / this.sheetWidth);

    ctx.drawImage(this.spriteSheet,
        xindex * this.frameWidth, yindex * this.frameHeight,  // source from sheet
        this.frameWidth, this.frameHeight,
        x, y,
        this.frameWidth * this.scale,
        this.frameHeight * this.scale);
}

Animation.prototype.currentFrame = function () {
    return Math.floor(this.elapsedTime / this.frameDuration);
}

Animation.prototype.isDone = function () {
    return (this.elapsedTime >= this.totalTime);
}
// ===================================================================
// End - Animation
// ===================================================================



// ===================================================================
// Start - Map Entities
// ===================================================================
/**
 * Creates a troop in the game.
 * 
 * @param {String} name name of the troop (name must be unique)
 * @param {int} atk attack value of the troop
 * @param {int} def defense value of the troop
 * @param {int} cost cost value of the troop
 * @param {int} move defines how far the troop can move
 */
function Troop(name, atk, def, cost, move) {
    this.name = name,
        this.atk = atk,
        this.def = def,
        this.cost = cost,
        this.move = move
}

/**
 * Creates a building in the game.
 * 
 * @param {String} name name of the building (name must be unique)
 * @param {int} atk attack value of the building
 * @param {int} def defense value of the building
 * @param {int} cost cost value of the building
 */
function Building(name, atk, def, cost) {
    this.name = name,
        this.atk = atk,
        this.def = def,
        this.cost = cost
}

/**
 * Creates a region in the game.
 * 
 * @param {String} name name of the region (Name must be unique)
 * @param {Boolean} bldg true if barracks is present else false
 * @param {int} owner 1 = not owned, 0 = player owned, 1 = enemy owned
 * @param {int} troopX X coordinate of unit
 * @param {int} troopY Y coordinate of unit
 * @param {int} bldgX X coordinnate of bldg
 * @param {int} bldgY Y coordinate of bldg
 * @param {int} territory ID of territory
 * @param {Stringp[]} neighbors Array of region names which neighbors (1 move cost) this region
 * @param {*} troopCount number of troops in a region, 0 if no troops
 */
function Region(name, bldg, owner, troopX, troopY, bldgX, bldgY, territory, neighbors, troopCount) {
    this.name = name,
        this.bldg = bldg,
        this.owner = owner,
        this.troopX = troopX,
        this.troopY = troopY,
        this.bldgX = bldgX,
        this.bldgY = bldgY,
        this.territory = territory,
        this.neighbors = neighbors,
        this.troopCount = troopCount

    //Change to array of troop objects
}
// ===================================================================
// End - Map Entities
// ===================================================================



// ===================================================================
// Start - Utility Functions
// ===================================================================\

/**
 * Creates array of region IDs on screen
 * @param {*} origin 
 */
function createArray(origin) {
    for (var i = 0; i < gameEngine.surfaceWidth / dim; i++) {
        regionArray[i] = new Array(gameEngine.surfaceHeight / dim);
    }
    // update the value of the array
    for (var i = 0; i < gameEngine.surfaceWidth / dim; i++) {
        for (var j = 0; j < gameEngine.surfaceHeight / dim; j++) {
            let xCor = origin.x + i;
            let yCor = origin.y + j;

            if (gameboard[xCor][yCor] != null) {
                regionArray[i][j] = {
                    name: gameboard[xCor][yCor].region.toString(),
                    x: i * dim,
                    y: j * dim,
                    w: dim,
                    h: dim
                };
            } else {
                regionArray[i][j] = null;
            }

        }
    }
}
/**
 * Creates rectangles and returns selected box
 * @param {*} rects array of hit boxes
 * @param {*} x x position of mouse click
 * @param {*} y y position of mouse click
 */
function getClickedRegion(rects, x, y) {
    var regionId = null;
    for (var i = 0, len = rects.length; i < len; i++) {
        for (var j = 0, len2 = rects[i].length; j < len2; j++) {

            var left = rects[i][j].x;
            var right = rects[i][j].x + rects[i][j].w;
            var top = rects[i][j].y;
            var bottom = rects[i][j].y + rects[i][j].h;

            if (right >= x
                && left <= x
                && bottom >= y
                && top <= y) {
                regionId = rects[i][j];
            }

        }
    }
    return regionId;
}

function getClickedItem(items, x, y) {
    var output = null;
    for (var i = 0, len = items.length; i < len; i++) {

        var left = items[i].x;
        var right = items[i].x + items[i].w;
        var top = items[i].y;
        var bottom = items[i].y + items[i].h;

        if (right >= x
            && left <= x
            && bottom >= y
            && top <= y) {
            output = items[i];
        }


    }
    return output;
}




function BuildRegions() {
    let Regions = [
        new Region('S - SW', false, 1, 40, 560, 40, 560, 'orange', [2, 3, 5], 0),
        new Region('S - SE', false, 1, 210, 560, 210, 560, 'orange', [1, 3, 16], 0),
        new Region('S - E', false, 1, 110, 460, 110, 460, 'orange', [1, 2, 4, 5], 0),
        new Region('S - NE', false, 1, 110, 290, 110, 290, 'orange', [3, 5, 6, 7, 14], 0),
        new Region('S - NW', false, 1, 40, 290, 40, 290, 'orange', [1, 3, 4, 6], 0),
        new Region('D - S', false, 0, 40, 240, 40, 240, 'green', [4, 5, 7, 8], 0),
        new Region('D - NW', false, 0, 120, 70, 40, 70, 'green', [4, 6, 8, 9, 10, 11], 0),
        new Region('D - E', false, 0, 280, 70, 280, 70, 'green', [6, 7], 0),
        new Region('I - NW', false, 0, 390, 30, 390, 30, 'grey', [7, 10, 12], 0),
        new Region('I - W', false, 0, 390, 120, 390, 120, 'grey', [7, 9, 11, 12], 0),
        new Region('I - SW', false, 0, 390, 210, 390, 210, 'grey', [7, 10, 14], 0),
        new Region('I - Mid', false, 0, 610, 30, 610, 30, 'grey', [9, 10, 13], 0),
        new Region('I - E', false, 0, 730, 30, 730, 30, 'grey', [12, 14], 0),
        new Region('G - N', false, 1, 460, 380, 460, 380, 'yellow', [4, 11, 15, 16], 0),
        new Region('G - SE', false, 1, 690, 520, 690, 520, 'yellow', [14], 0),
        new Region('G - SW', false, 1, 460, 520, 460, 580, 'yellow', [2, 14], 0),
    ];
    return Regions;
}


/**
 * Builds a Gameboard that is 90x72. By calling an index of the gameboard, the user is able to return whether or not the
 * tile is a land tile, it will return the region number and the territory type.
 */
function BuildBoard() {
    var gameboard = [];
    for (var i = 0; i < 90; i++) {
        gameboard.push([]);
        for (var j = 0; j < 72; j++) {
            gameboard[i].push({
                land: false,
                region: 0,
                territory: 'none'
            });
        }
    }

    const data

    //console.log(data);
    //const testData = [0,1,2,3]

    for (var y = 0; y < 72; y++) {
        for (var x = 0; x < 90; x++) {
            let csvVal = data[72 * y + x];

            if (csvVal == 1 || csvVal == 2 || csvVal == 3 || csvVal == 4 || csvVal == 5) {
                gameboard[x][y].land = true;
                gameboard[x][y].region = csvVal;
                gameboard[x][y].territory = 'orange';
            } else if (csvVal == 6 || csvVal == 7 || csvVal == 8) {
                gameboard[x][y].land = true;
                gameboard[x][y].region = csvVal;
                gameboard[x][y].territory = 'green';
            } else if (csvVal == 9 || csvVal == 10 || csvVal == 11 || csvVal == 12 || csvVal == 13) {
                gameboard[x][y].land = true;
                gameboard[x][y].region = csvVal;
                gameboard[x][y].territory = 'grey';
            } else if (csvVal == 14 || csvVal == 15 || csvVal == 16) {
                gameboard[x][y].land = true;
                gameboard[x][y].region = csvVal;
                gameboard[x][y].territory = 'yellow';
            } else if (csvVal == 0 || csvVal == -1 || csvVal == 160) {
                gameboard[x][y].land = null;
                gameboard[x][y].region = csvVal;
                gameboard[x][y].territory = null;
            }
        }
    }

    // for (var i = 0; i < 90; i++){
    //     var str = '';
    //     gameboard[i].forEach((element) => {
    //         str += element.region + ' '; 
    //     });
    //     console.log(str);
    // }

    return gameboard;
}

function StartGame(regionArray) {
    this.regionArray.forEach((region) => region.troopCount += 4);
    this.regionArray[0].enemyHero = true;
    this.regionArray[12].friendlyHero = true;
}

// ===================================================================
// End - Utility Functions
// ===================================================================

// ===================================================================
// Start - Combat Functions
// ===================================================================
function fight(region1, region2) {
    atkPow = region1.troopCount;
    defPow = region2.troopCount;

    while (defPow > 0 && atkPow > 0) {
        Math.random() > 0.5 ? atkPow-- : defPow--;
    }

    if (atkPow > defPow) {
        region2.owner = region1.owner;
        region2.troopCount = atkPow;
        region1.troopCount = 0;
        return true; // Attacker won
    } else {
        region1.troopCount = 0;
        return false; // Defender won
    }
}

//Merge attack and move @ Ryan

function move(sourceRegion, destination, troopCount) {
    if (sourceRegion.neighbors.contains(destination.number)) {
        sourceRegion.troopCount -= troopCount;
        destination.troopCount += troopCount;
    }
}

// ===================================================================
// End - Combat Functions
// ===================================================================


// ===================================================================
// Start - Resource Display
// ===================================================================
function ResourceDisplay(game) {
    this.border = AM.getAsset("./img/sidebar/resource_display.png");
    this.foodIcon = AM.getAsset("./img/sidebar/food_icon.png")
    this.moneyIcon = AM.getAsset("./img/sidebar/money_icon.png")
    Entity.call(this, game, 900, 0);
}

ResourceDisplay.prototype = new Entity();
ResourceDisplay.prototype.constructor = ResourceDisplay;

ResourceDisplay.prototype.draw = function (ctx) {
    ctx.fillStyle = "black";
    ctx.font = "24px Arial";

    // Draw the border
    ctx.drawImage(this.border, this.x, this.y);

    // Draw the Food Icon and Count
    ctx.drawImage(this.foodIcon, this.x + 30, this.y + 10);
    ctx.fillText(this.foodCount, this.x + 70, this.y + 35);

    // Draw the Money Icon and Count
    ctx.drawImage(this.moneyIcon, this.x + 130, this.y + 10);
    ctx.fillText(this.moneyCount, this.x + 160, this.y + 35);
}
// ===================================================================
// End - Resource Display
// ===================================================================



// ===================================================================
// Start - Troop Display
// ===================================================================
function TroopDisplay(game) {
    this.border = AM.getAsset("./img/icon/alien.png");
    Entity.call(this, game, 0, 0);
}

TroopDisplay.prototype = new Entity();
TroopDisplay.prototype.constructor = TroopDisplay;

TroopDisplay.prototype.update = function (ctx) { //update the owner
}

TroopDisplay.prototype.draw = function (ctx) {
    ctx.drawImage(this.border, cameraOrigin.x * 20, cameraOrigin.y * 20,
        bgWidth, bgHeight,
        0, 250,
        bgWidth * 0.1, bgHeight * 0.1);
}
// ===================================================================
// End - Troop Display
// ===================================================================



// ===================================================================
// Start - Building Display
// ===================================================================
function BuildingDisplay(game) {
    this.border = AM.getAsset("./img/icon/barracks.png");
    Entity.call(this, game, 0, 0);
}

BuildingDisplay.prototype = new Entity();
BuildingDisplay.prototype.constructor = BuildingDisplay;

BuildingDisplay.prototype.update = function (ctx) {
}

BuildingDisplay.prototype.draw = function (ctx) {
    ctx.drawImage(this.border, cameraOrigin.x * 20, cameraOrigin.y * 20,
        bgWidth, bgHeight,
        0, 100,
        bgWidth * 0.1, bgHeight * 0.1);
}
// ===================================================================
// End - Building Display
// ===================================================================



// ===================================================================
// Start - Map Display
// ===================================================================
function MapDisplay(game) {
    this.border = AM.getAsset("./img/map/newMap2.png");
    Entity.call(this, game, 0, 0);
}

MapDisplay.prototype = new Entity();
MapDisplay.prototype.constructor = MapDisplay;

MapDisplay.prototype.update = function (ctx) {
}

MapDisplay.prototype.draw = function (ctx) {
    ctx.drawImage(this.border, cameraOrigin.x * dim, cameraOrigin.y * dim,
        bgWidth, bgHeight,
        0, 0,
        modbgWidth, modbgHeight);

    // **Debug code** Displays Region ID on map
    if (debug && debugGrid) {



        var xCal = 4;
        var yCal = -5;
        for (var i = 0; i < gameEngine.surfaceWidth / dim; i++) {
            for (var j = 0; j < gameEngine.surfaceHeight / dim; j++) {
                // add sahdows to numbers
                ctx.fillStyle = "black";
                ctx.font = "12px Arial";
                ctx.fillText(regionArray[i][j].name, (i * dim) + xCal + 1, ((j + 1) * dim) + yCal + 1);

                //displays numbers
                ctx.fillStyle = "white";
                ctx.font = "12px Arial";
                ctx.fillText(regionArray[i][j].name, (i * dim) + xCal, ((j + 1) * dim) + yCal);

                // displays rectangles
                ctx.strokeStyle = "black";
                ctx.strokeRect(i * dim, j * dim, dim, dim)
            }
        }
    }


}
// ===================================================================
// End - Map Display
// ===================================================================



// ===================================================================
// Start - Minimap Display
// ===================================================================
function MinimapDisplay(game) {
    this.border = AM.getAsset("./img/map/newMap2.png");
    this.minimapBorderWidth = 220;
    this.miniMapBorderHeight = 220;


    this.aspectRatio = Math.min(((this.minimapBorderWidth - 10) / bgWidth).toFixed(2),
        ((this.miniMapBorderHeight - 10) / bgHeight).toFixed(2));

    this.smWidth = (bgWidth * this.aspectRatio).toFixed(0); // Width of the shrunk map
    this.smHeight = (bgHeight * this.aspectRatio).toFixed(0); // Height of the shunk map


    this.originX = ((this.minimapBorderWidth / 2) - (this.smWidth / 2)); // Start point of image in mini map
    this.originY = ((this.miniMapBorderHeight / 2) - (this.smHeight / 2)); // Start point of image in mini map

    this.xMax = ((bgWidth / dim) - (gameEngine.surfaceWidth / dim)).toFixed(0);
    this.yMax = ((bgHeight / dim) - (gameEngine.surfaceHeight / dim)).toFixed(0);

    Entity.call(this, game, 0, 0);
}

MinimapDisplay.prototype = new Entity();
MinimapDisplay.prototype.constructor = MinimapDisplay;

MinimapDisplay.prototype.update = function (ctx) {
    var click = gameEngine.click;
    if (click != null &&
        click.x >= this.originX &&
        click.y >= this.originY &&
        click.x <= this.smWidth &&
        click.y <= this.smWidth) {
        if (debug) {
            console.log("%c Minimap click below this:", "background: #222; color: #bada55");
        }

        // Grabs the click on the minimap
        var xClickOnMinimap = ((click.x - this.originX) / this.aspectRatio / dim).toFixed(0);
        var yClickOnMinimap = ((click.y - this.originY) / this.aspectRatio / dim).toFixed(0);

        if (debug) {
            console.log("xClickOnMinimap --- " + xClickOnMinimap);
            console.log("yClickOnMinimap --- " + yClickOnMinimap);
        }

        // Translates the minimap click to set the point in the map
        var xTranslationToMap = (Number(xClickOnMinimap) - ((gameEngine.surfaceWidth * this.aspectRatio) / 2)).toFixed(0);
        var yTranslationToMap = (Number(yClickOnMinimap) - ((gameEngine.surfaceHeight * this.aspectRatio) / 2)).toFixed(0);


        // Takes care of clipping to edges of map
        if (xTranslationToMap >= this.xMax) xTranslationToMap = this.xMax;
        if (xTranslationToMap <= 0) xTranslationToMap = 0;
        if (yTranslationToMap >= this.yMax) yTranslationToMap = this.yMax;
        if (yTranslationToMap <= 0) yTranslationToMap = 0;

        cameraOrigin["x"] = xTranslationToMap;
        cameraOrigin["y"] = yTranslationToMap;
        // createArray(cameraOrigin);
        console.log(cameraOrigin);


        if (debug) {
            console.log("translation x --- " + xTranslationToMap);
            console.log("translation y --- " + yTranslationToMap);
            console.log("x max --- " + this.xMax);
            console.log("y max --- " + this.yMax);
            console.log("camera origin x --- " + cameraOrigin["x"]);
            console.log("camera origin y --- " + cameraOrigin["y"]);
        }


        gameEngine.click = null;
    } else if (click != null &&
        click.x <= this.minimapBorderWidth &&
        click.y <= this.miniMapBorderHeight) {
        gameEngine.click = null; // Ignores click if click outside of shrunk map
    }
}

MinimapDisplay.prototype.draw = function (ctx) {
    ctx.fillStyle = "black";
    ctx.strokeStyle = "white";

    // Draws the border
    ctx.strokeRect(0, 0, this.minimapBorderWidth, this.miniMapBorderHeight);
    ctx.fillRect(0, 0, this.minimapBorderWidth, this.miniMapBorderHeight);

    // Draws the shrunk map
    ctx.drawImage(this.border, 0, 0,
        bgWidth, bgHeight,
        this.originX,
        this.originY,
        this.smWidth, this.smHeight);

    // Draws the vision rectangle
    ctx.lineWidth = 2;
    ctx.strokeRect(this.originX + (cameraOrigin.x * (dim * this.aspectRatio)),
        this.originY + (cameraOrigin.y * (dim * this.aspectRatio)),
        gameEngine.surfaceWidth * this.aspectRatio,
        gameEngine.surfaceHeight * this.aspectRatio);
}
// ===================================================================
// End - Minimap Display
// ===================================================================



// ===================================================================
// Start - Control Display
// ===================================================================
function ControlDisplay(game) {

    this.btnDim = 80;
    this.buttonIcon = AM.getAsset("./img/control/button.png")

    this.actionIconOn = AM.getAsset("./img/control/action_on.png")
    this.actionIconOff = AM.getAsset("./img/control/action_off.png")
    this.fightIcon = AM.getAsset("./img/control/fight.png")
    this.moveIcon = AM.getAsset("./img/control/move.png")

    this.buildIconOn = AM.getAsset("./img/control/build_on.png")
    this.buildIconOff = AM.getAsset("./img/control/build_off.png")
    this.barracksIcon = AM.getAsset("./img/control/barracks_on.png")
    this.siloIcon = AM.getAsset("./img/control/silo2.png")

    this.troopIconOn = AM.getAsset("./img/control/build_troop_on.png")
    this.troopIconOff = AM.getAsset("./img/control/build_troop_off.png")
    this.soldierIcon = AM.getAsset("./img/control/soldier5.png")

    this.endTurnIconOn = AM.getAsset("./img/control/end_turn_on.png")
    this.endTurnIconOff = AM.getAsset("./img/control/end_turn_off.png")

    this.isActivate = true;

    var w = gameEngine.surfaceWidth;
    var h = gameEngine.surfaceHeight;
    this.aBtn = { x: w - this.btnDim * 4, y: h - this.btnDim };
    this.tBtn = { x: w - this.btnDim * 3, y: h - this.btnDim };
    this.bBtn = { x: w - this.btnDim * 2, y: h - this.btnDim };
    this.eTBtn = { x: w - this.btnDim * 1, y: h - this.btnDim };

    this.a_moveBtn = { x: w - this.btnDim * 4, y: h - this.btnDim * 2 };
    this.t_infBtn = { x: w - this.btnDim * 3, y: h - this.btnDim * 2 };
    this.b_farmBtn = { x: w - this.btnDim * 2, y: h - this.btnDim * 2 };
    this.b_barBtn = { x: w - this.btnDim * 3, y: h - this.btnDim * 2 };

    this.menu = [{ name: "action", x: this.aBtn.x, y: this.aBtn.y, w: this.btnDim, h: this.btnDim },
    { name: "troop", x: this.tBtn.x, y: this.tBtn.y, w: this.btnDim, h: this.btnDim },
    { name: "building", x: this.bBtn.x, y: this.bBtn.y, w: this.btnDim, h: this.btnDim },
    { name: "endTurn", x: this.eTBtn.x, y: this.eTBtn.y, w: this.btnDim, h: this.btnDim }];

    this.actionFlag = false;
    this.troopFlag = false;
    this.buildingFlag = false;

    this.actionActivate = false;
    this.troopActivate = false;
    this.buildingActivate = false;
    this.endTurnActivate = false;

    Entity.call(this, game, 0, 0);
}

ControlDisplay.prototype = new Entity();
ControlDisplay.prototype.constructor = ControlDisplay;

// max x=1438; x changes by the size of the map display
ControlDisplay.prototype.update = function (ctx) {
    var click = gameEngine.click;
    var that = this;

    if (this.isActivate) {
        toggleAllOn();
        if (click !== null) {
            var x = getClickedItem(this.menu, click.x, click.y);
            if (x !== null) {
                if (x.name === "action") {
                    toggleAllOff();
                    this.actionFlag = true;
                    click = null;
                }
                if (x.name === "troop") {
                    toggleAllOff();
                    this.troopFlag = true;
                    click = null;
                }
                if (x.name === "building") {
                    toggleAllOff();
                    this.buildingFlag = true;
                    click = null;
                }
                if (x.name === "endTurn") {
                    toggleAllOff();
                }
            } else {
                toggleAllOff();
            }
        }

    }

    function toggleAllOff() {
        that.actionFlag = false;
        that.troopFlag = false;
        that.buildingFlag = false;
    }

    function toggleAllOn() {
        that.actionActivate = true;
        that.troopActivate = true;
        that.buildingActivate = true;
        that.endTurnActivate = true;
    }


}

ControlDisplay.prototype.draw = function (ctx) {
    ctx.fillStyle = "#9e9e9e";
    ctx.strokeStyle = "black";

    // Displays four mega menus
    ctx.drawImage(this.buttonIcon, this.aBtn.x, this.aBtn.y, this.btnDim, this.btnDim);
    ctx.drawImage(this.buttonIcon, this.tBtn.x, this.tBtn.y, this.btnDim, this.btnDim);
    ctx.drawImage(this.buttonIcon, this.bBtn.x, this.bBtn.y, this.btnDim, this.btnDim);
    ctx.drawImage(this.buttonIcon, this.eTBtn.x, this.eTBtn.y, this.btnDim, this.btnDim);

    if (this.actionActivate || this.buildingActivate || this.troopActivate || this.endTurnActivate) {
        ctx.drawImage(this.actionIconOn, this.aBtn.x + 10, this.aBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        ctx.drawImage(this.troopIconOn, this.tBtn.x + 10, this.tBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        ctx.drawImage(this.buildIconOn, this.bBtn.x + 10, this.bBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        ctx.drawImage(this.endTurnIconOn, this.eTBtn.x + 10, this.eTBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
    } else {
        ctx.drawImage(this.actionIconOff, this.aBtn.x + 10, this.aBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        ctx.drawImage(this.troopIconOff, this.tBtn.x + 10, this.tBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        ctx.drawImage(this.buildIconOff, this.bBtn.x + 10, this.bBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        ctx.drawImage(this.endTurnIconOff, this.eTBtn.x + 10, this.eTBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
    }




    if (this.actionFlag) {
        ctx.drawImage(this.buttonIcon, this.a_moveBtn.x, this.a_moveBtn.y, this.btnDim, this.btnDim);
        ctx.drawImage(this.fightIcon, this.a_moveBtn.x + 10, this.a_moveBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        if (debug) {
            console.log("ac" + this.actionFlag);
            console.log("tr" + this.troopFlag);
            console.log("bu" + this.buildingFlag);
        }
    }


    if (this.troopFlag) {
        ctx.drawImage(this.buttonIcon, this.t_infBtn.x, this.t_infBtn.y, this.btnDim, this.btnDim);
        ctx.drawImage(this.soldierIcon, this.t_infBtn.x + 10, this.t_infBtn.y + 10, this.btnDim - 20, this.btnDim - 20);

        if (debug) {
            console.log("ac" + this.actionFlag);
            console.log("tr" + this.troopFlag);
            console.log("bu" + this.buildingFlag);
        }
    }


    if (this.buildingFlag) {
        ctx.drawImage(this.buttonIcon, this.b_farmBtn.x, this.b_farmBtn.y, this.btnDim, this.btnDim);
        ctx.drawImage(this.buttonIcon, this.b_barBtn.x, this.b_barBtn.y, this.btnDim, this.btnDim);

        ctx.drawImage(this.barracksIcon, this.b_barBtn.x + 10, this.b_barBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        ctx.drawImage(this.siloIcon, this.b_farmBtn.x + 10, this.b_farmBtn.y + 10, this.btnDim - 20, this.btnDim - 20);
        if (debug) {
            console.log("ac" + this.actionFlag);
            console.log("tr" + this.troopFlag);
            console.log("bu" + this.buildingFlag);
        }
    }
}
// ===================================================================
// End - Control Display
// ===================================================================



// ===================================================================
// Start - Input Handler
// ===================================================================
function InputHandler(game) {
    this.keyXMax = (bgWidth / dim) - (gameEngine.surfaceWidth / dim);
    this.keyYMax = (bgHeight / dim) - (gameEngine.surfaceHeight / dim);
    Entity.call(this, game, 0, 0);
}

InputHandler.prototype = new Entity();
InputHandler.prototype.constructor = MapDisplay;

InputHandler.prototype.update = function (ctx) {
    // Control for WASD map movement
    var key = gameEngine.keyDown;
    if (key != null) {
        if (key["code"] === "KeyW") {
            if (cameraOrigin.y > 0) {
                cameraOrigin.y--;
                createArray(cameraOrigin);
                if (debug) {
                    console.log("%c RegionArray below this:", "background: #222; color: #bada55");
                    console.log(regionArray);
                }
            }

        }
        else if (key["code"] === "KeyA") {
            if (cameraOrigin.x > 0) {
                cameraOrigin.x--;
                createArray(cameraOrigin);
                if (debug) {
                    console.log("%c RegionArray below this:", "background: #222; color: #bada55");
                    console.log(regionArray);
                }
            }

        }
        else if (key["code"] === "KeyS") {
            if (cameraOrigin.y < this.keyYMax) {
                cameraOrigin.y++;
                createArray(cameraOrigin);
                if (debug) {
                    console.log("%c RegionArray below this:", "background: #222; color: #bada55");
                    console.log(regionArray);
                }
            }

        }
        else if (key["code"] === "KeyD") {
            if (cameraOrigin.x < this.keyXMax) {
                cameraOrigin.x++;
                createArray(cameraOrigin);
                if (debug) {
                    console.log("%c RegionArray below this:", "background: #222; color: #bada55");
                    console.log(regionArray);
                }

            }
        }
        console.log(cameraOrigin);
        gameEngine.keyDown = null;
    }

    // Control clicks on the map
    var click = gameEngine.click;
    if (click != null) {

        var regionClicked = getClickedRegion(regionArray, click.x, click.y);
        console.log("%c Region clicked below this:", "background: #222; color: #bada55");
        console.log(click);
        console.log(regionClicked);

        gameEngine.click = null;
    }

    // Control wheel events
    if (gameEngine.zoomIn) {
        modbgWidth *= 1.02;
        modbgHeight *= 1.02;
        dim *= 1.02;
        gameEngine.zoomIn = false;
    }
    if (gameEngine.zoomOut) {
        modbgWidth /= 1.02;
        modbgHeight /= 1.02;
        dim /= 1.02;
        gameEngine.zoomOut = false;
    }

}
// ===================================================================
// End - Input Controller
// ===================================================================



// ===================================================================
// Start - Audio Handler
// ===================================================================
function AudioHandler(game) {
    var audio = new Audio("./sound/bg_music.mp3");
    audio.play();
    Entity.call(this, game, 0, 0);
}

AudioHandler.prototype = new Entity();
AudioHandler.prototype.constructor = AudioHandler;

AudioHandler.prototype.update = function (ctx) {
}


AudioHandler.prototype.draw = function (ctx) {
}
// ===================================================================
// End - Audio Handler
// ===================================================================



// ===================================================================
// Start - Audio Handler
// ===================================================================

function WelcomeScreen(game) {
    // Welcome Screen Background
    this.animation = new Animation(AM.getAsset("./img/welcome_screen.png"), 1280, 720, 7680, .08, 6, true, 1);
    this.ctx = game.ctx;

    // New Game Button Paramters
    this.newGameButton = AM.getAsset("./img/button_new-game.png");
    this.ngbWidth = 270;
    this.ngbHeight = 72;
    this.ngbX = (gameEngine.surfaceWidth / 2) - (270 / 2); //This is to center the button
    this.ngbY = 500; //Y-coordinate of button

    // Hitboxes for the buttons
    this.hitBoxes = [{ name: "newGame", x: this.ngbX, y: this.ngbY, w: this.ngbWidth, h: this.ngbHeight }];

    this.audio = new Audio("./sound/welcome_music.mp3");
    this.audio.autoplay = true;
    this.audio.play();


    Entity.call(this, game, 0, 0);
}

WelcomeScreen.prototype = new Entity();
WelcomeScreen.prototype.constructor = WelcomeScreen;

WelcomeScreen.prototype.update = function (ctx) {

    if (gameEngine.click != null) {

        var hit = getClickedItem(this.hitBoxes, gameEngine.click.x, gameEngine.click.y);

        if (debug) {
            console.log(gameEngine.click);
            console.log(this.hitBoxes);
            console.log(hit);
        }

        if (hit != null && hit.name === "newGame") {
            gameEngine.newGame = true;
        }

        gameEngine.click = null;
    }
    if (gameEngine.newGame) {
        this.removeFromWorld = true;
        gameEngine.addEntity(new MapDisplay(gameEngine));

        gameEngine.addEntity(new BuildingDisplay(gameEngine));
        gameEngine.addEntity(new TroopDisplay(gameEngine));

        gameEngine.addEntity(new MinimapDisplay(gameEngine));
        gameEngine.addEntity(new ResourceDisplay(gameEngine));
        gameEngine.addEntity(new ControlDisplay(gameEngine));



        gameEngine.addEntity(new InputHandler(gameEngine));
        gameEngine.addEntity(new AudioHandler(gameEngine));
    }
}

WelcomeScreen.prototype.draw = function (ctx) {
    this.animation.drawFrame(this.game.clockTick, this.ctx, this.x, this.y);
    ctx.drawImage(this.newGameButton, this.ngbX, this.ngbY, this.ngbWidth, this.ngbHeight);
}
// ===================================================================
// End - Audio Handler
// ===================================================================



// ===================================================================
// Start - Main
// ===================================================================
function Main() {
    // Resource Display
    AM.queueDownload("./img/sidebar/resource_display.png");
    AM.queueDownload("./img/sidebar/food_icon.png");
    AM.queueDownload("./img/sidebar/money_icon.png");

    // Game Map Display
    AM.queueDownload("./img/map/newMap2.png");

    // Combat Entities 
    AM.queueDownload("./img/icon/alien.png");
    AM.queueDownload("./img/icon/soldier.png");
    AM.queueDownload("./img/icon/star.png");

    //Building Entities
    AM.queueDownload("./img/icon/barracks.png");
    AM.queueDownload("./img/icon/silo.png");

    AM.queueDownload("./img/map/game map9072.png");
    AM.queueDownload("./map images/master.png");
    AM.queueDownload("./img/background3.png");


    // Welcome Screen
    AM.queueDownload("./img/welcome_screen.png");
    AM.queueDownload("./img/button_new-game.png");

    // Control Display
    AM.queueDownload("./img/control/button.png");
    AM.queueDownload("./img/control/action_on.png");
    AM.queueDownload("./img/control/action_off.png");
    AM.queueDownload("./img/control/build_on.png");
    AM.queueDownload("./img/control/build_off.png");
    AM.queueDownload("./img/control/build_troop_on.png");
    AM.queueDownload("./img/control/build_troop_off.png");
    AM.queueDownload("./img/control/end_turn_on.png");
    AM.queueDownload("./img/control/end_turn_off.png");
    AM.queueDownload("./img/control/barracks_on.png");
    AM.queueDownload("./img/control/fight.png");
    AM.queueDownload("./img/control/silo.png");
    AM.queueDownload("./img/control/silo2.png");
    AM.queueDownload("./img/control/move.png");
    AM.queueDownload("./img/control/soldier5.png");



    AM.downloadAll(function () {
        gameEngine.addEntity(new WelcomeScreen(gameEngine));
    });



    // regionArray = BuildRegions();
    // BuildBoard();
    // StartGame(regionArray);



    // console.log('This is a test');
    // fight(regionArray[12], regionArray[0]) ? console.log('you win') : console.log('you lose');
}

Main();
// ===================================================================
// End - Main
// ==================================================================